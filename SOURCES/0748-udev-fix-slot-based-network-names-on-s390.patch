From 2e7f41bd0632312d00d472a73a312218a29ce65b Mon Sep 17 00:00:00 2001
From: Viktor Mihajlovski <mihajlov@linux.ibm.com>
Date: Thu, 18 Mar 2021 11:03:34 +0100
Subject: [PATCH] udev: fix slot based network names on s390

The s390 PCI driver assigns the hotplug slot name from the
function_id attribute of the PCI device using a 8 char hexadecimal
format to match the underlying firmware/hypervisor notation.

Further, there's always a one-to-one mapping between a PCI
function and a hotplug slot, as individual functions can
hot plugged even for multi-function devices.

As the generic matching code will always try to parse the slot
name in /sys/bus/pci/slots as a positive decimal number, either
a wrong value might be produced for ID_NET_NAME_SLOT if
the slot name consists of decimal numbers only, or none at all
if a character in the range from 'a' to 'f' is encountered.

Additionally, the generic code assumes that two interfaces
share a hotplug slot, if they differ only in the function part
of the PCI address. E.g., for an interface with the PCI address
dddd:bb:aa.f, it will match the device to the first slot with
an address dddd:bb:aa. As more than one slot may have this address
for the s390 PCI driver, the wrong slot may be selected.

To resolve this we're adding a new naming schema version with the
flag NAMING_SLOT_FUNCTION_ID, which enables the correct matching
of hotplug slots if the device has an attribute named function_id.
The ID_NET_NAME_SLOT property will only be produced if there's
a file /sys/bus/pci/slots/<slotname> where <slotname> matches
the value of /sys/bus/pci/devices/.../function_id in 8 char
hex notation.

Fixes #19016
See also #19078

Related: #1939914

(cherry picked from commit a496a238e8ee66ce25ad13a3f46549b2e2e979fc)
---
 man/systemd.net-naming-scheme.xml | 10 +++++++++
 src/udev/udev-builtin-net_id.c    | 34 +++++++++++++++++++++++++++++++
 2 files changed, 44 insertions(+)

diff --git a/man/systemd.net-naming-scheme.xml b/man/systemd.net-naming-scheme.xml
index fe1aa4b654..e42c93eaad 100644
--- a/man/systemd.net-naming-scheme.xml
+++ b/man/systemd.net-naming-scheme.xml
@@ -313,6 +313,16 @@
           <para>Same as naming scheme <constant>rhel-8.4</constant>.</para>
         </varlistentry>
 
+        <varlistentry>
+         <term><constant>rhel-8.7</constant></term>
+
+          <listitem><para>PCI hotplug slot names for the s390 PCI driver are a hexadecimal representation
+          of the <filename>function_id</filename> device attribute. This attribute is now used to build the
+          <varname>ID_NET_NAME_SLOT</varname>. Before that, all slot names were parsed as decimal
+          numbers, which could either result in an incorrect value of the <varname>ID_NET_NAME_SLOT</varname>
+          property or none at all.</para></listitem>
+        </varlistentry>
+
         <para>Note that <constant>latest</constant> may be used to denote the latest scheme known to this
         particular version of systemd.</para>
     </variablelist>
diff --git a/src/udev/udev-builtin-net_id.c b/src/udev/udev-builtin-net_id.c
index 386d74ca5e..b57227a09f 100644
--- a/src/udev/udev-builtin-net_id.c
+++ b/src/udev/udev-builtin-net_id.c
@@ -126,6 +126,7 @@ typedef enum NamingSchemeFlags {
         NAMING_SR_IOV_V        = 1 << 0, /* Use "v" suffix for SR-IOV, see 609948c7043a40008b8299529c978ed8e11de8f6*/
         NAMING_NPAR_ARI        = 1 << 1, /* Use NPAR "ARI", see 6bc04997b6eab35d1cb9fa73889892702c27be09 */
         NAMING_BRIDGE_NO_SLOT  = 1 << 9, /* Don't use PCI hotplug slot information if the corresponding device is a PCI bridge */
+        NAMING_SLOT_FUNCTION_ID = 1 << 10, /* Use function_id if present to identify PCI hotplug slots */
 
         /* And now the masks that combine the features above */
         NAMING_V238 = 0,
@@ -137,6 +138,7 @@ typedef enum NamingSchemeFlags {
         NAMING_RHEL_8_4 = NAMING_V239|NAMING_BRIDGE_NO_SLOT,
         NAMING_RHEL_8_5 = NAMING_RHEL_8_4,
         NAMING_RHEL_8_6 = NAMING_RHEL_8_4,
+        NAMING_RHEL_8_7 = NAMING_RHEL_8_4|NAMING_SLOT_FUNCTION_ID,
 
         _NAMING_SCHEME_FLAGS_INVALID = -1,
 } NamingSchemeFlags;
@@ -156,6 +158,7 @@ static const NamingScheme naming_schemes[] = {
         { "rhel-8.4", NAMING_RHEL_8_4 },
         { "rhel-8.5", NAMING_RHEL_8_5 },
         { "rhel-8.6", NAMING_RHEL_8_6 },
+        { "rhel-8.7", NAMING_RHEL_8_7 },
         /* … add more schemes here, as the logic to name devices is updated … */
 };
 
@@ -477,6 +480,37 @@ static int dev_pci_slot(struct udev_device *dev, struct netnames *names) {
 
         hotplug_slot_dev = names->pcidev;
         while (hotplug_slot_dev) {
+                if (!udev_device_get_sysname(hotplug_slot_dev))
+                        continue;
+
+                /*  The <sysname>/function_id attribute is unique to the s390 PCI driver.
+                    If present, we know that the slot's directory name for this device is
+                    /sys/bus/pci/XXXXXXXX/ where XXXXXXXX is the fixed length 8 hexadecimal
+                    character string representation of function_id.
+                    Therefore we can short cut here and just check for the existence of
+                    the slot directory. As this directory has to exist, we're emitting a
+                    debug message for the unlikely case it's not found.
+                    Note that the domain part of doesn't belong to the slot name here
+                    because there's a 1-to-1 relationship between PCI function and its hotplug
+                    slot.
+                 */
+                if (naming_scheme_has(NAMING_SLOT_FUNCTION_ID)) {
+                        attr = udev_device_get_sysattr_value(hotplug_slot_dev, "function_id");
+                        if (attr) {
+                                int function_id;
+                                _cleanup_free_ char *str;
+
+                                if (safe_atoi(attr, &function_id) >= 0 &&
+                                    asprintf(&str, "%s/%08x/", slots, function_id) >= 0 &&
+                                    access(str, R_OK) == 0) {
+                                        hotplug_slot = function_id;
+                                        domain = 0;
+                                } else
+                                        log_debug("No matching slot for function_id (%s).", attr);
+                                break;
+                        }
+                }
+
                 FOREACH_DIRENT_ALL(dent, dir, break) {
                         int i, r;
                         char str[PATH_MAX];
